# This Makefile section is intended to compile a collection of C++ sources and
# headers, properly keeping track of all header dependencies.  You should
# define a few variables and then include this file - you need define no
# targets at all to get compilation working.  If you do define any targets,
# then you can define them after includeing this file if you wish the default
# action to be a recursive build.
#
# The variables you can define are as follows.  Omit irrelevant ones.
# SUBDIRS - a list of subdirectories to visit recursively when dealing with the
#   'all' or 'clean' targets.  Subdirs are built after the current dir.
# SOURCE_DIRS - a list of directories other than the current one in which to
# 	look for sources
# BIN - the name of the binary to compile from all the cpp files (either a .la
#   library file, or an executable).
# INCLUDE - include arguments, e.g. "-I.. -Imy-headers".  Include arguments
#   will also be extrapolated from LIB_DEP_NAMES, so you needn't include those
#   here.  Indeed, you probably shouldn't ever need to specify this.
# LIBS - system library arguments, e.g. "-lstdc++".
# LIB_DEP_NAMES - base names of prerequisite libraries, e.g. "libsakusen" will
#   be searched for at ../libsakusen/libsakusen.la  and at
#   ../../libsakusen/libsakusen.la.  This will give appropriate
#   include arguments, linking arguments, make dependencies and rules for
#   building (by making in the directory of the library).
# LIB_DEP - Like LIB_DEP_NAMES, but you provide the full path and name, e.g.
#   "../libsakusen.la", rather than this Makefile searching for you.
# THIS_CXXFLAGS - other args to gcc at compile stage, e.g. "-Wno-format".
#   Note that most warnings are on by default, but you can turn them off in
#   this variable.
# THIS_LDFLAGS - other args to libtool at link stage, e.g. "-no-install".
# PREFIX - the installation prefix, e.g. "/usr/local" (to which it defaults).
#   Expected to be set by the user in the environment, not by the including
#   Makefile
# PCH - if this is defined to "yes" then the build process will attempt to use
# 	precompiled headers.  Otherwise it will not.  The default is "no", because
# 	precompiled headers don't seem to sork properly as yet, but it should be
# 	tried again when a new version of gcc is released

CXX ?= g++
CC ?= gcc

PCH ?= no

PREFIX ?= /usr/local

# Determine the name of this makefile

MY_NAME := $(lastword $(MAKEFILE_LIST))

# Use it to find the top directory

TOP_DIR := $(dir $(MY_NAME))

# Determine whether we're compiling a library or an executable

IS_LIB := $(filter %.la,$(BIN))

CXX_SOURCES := $(wildcard *.cpp) \
	$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.cpp))
C_SOURCES := $(wildcard *.c) \
	$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.c))
CXX_BASES := $(basename $(CXX_SOURCES))
C_BASES := $(basename $(C_SOURCES))
LIBTOOL_OBJS := $(foreach base,$(CXX_BASES) $(C_BASES),.obj/$(base).lo)
CXX_OBJS := $(foreach base,$(CXX_BASES),.obj/$(base).o)
C_OBJS := $(foreach base,$(C_BASES),.obj/$(base).o)
MAKEFRAGS := \
	$(foreach source,$(CXX_SOURCES) $(C_SOURCES),.makefrags/$(source).makefrag)

# Add warnings and debugging, and turn off optimizations.  In the long run
# we'll want a way to have debug and release builds in parallel
BUILD_CXXFLAGS := -Werror -Wall -Wextra -Woverloaded-virtual -Wold-style-cast -Wundef -Wpointer-arith -Wwrite-strings -O0 -g3

ifneq ($(BIN),)

ALL_HEADER := $(basename $(BIN))-all.hpp
ALL_HEADER_GCH_DIR := $(ALL_HEADER).gch
ALL_HEADER_GCH_PDC := $(ALL_HEADER_GCH_DIR)/pdc
ALL_HEADER_GCH_PIC := $(ALL_HEADER_GCH_DIR)/pic

endif

# We replace '-' with '/' in the library name when using it as a directory
# because e.g. libsakusen-comms is in libsakusen/comms

E_LIB_DEP := $(foreach lib,$(LIB_DEP_NAMES), \
		$(TOP_DIR)$(subst -,/,$(lib))/$(lib).la \
	) \
	$(LIB_DEP)
E_INCLUDE := -I. $(foreach lib,$(E_LIB_DEP),-I$(dir $(lib))) $(INCLUDE)

# Default target is to build the binary (and recurse)

all: $(BIN)
	@for subdir in $(SUBDIRS); do \
		$(MAKE) -C $$subdir $@ || exit 1 \
		; \
	done

# Clean (recursively)

clean:
	-rm -rf .libs .obj .makefrags $(ALL_HEADER_GCH_DIR)
	-rm -f $(BIN) revision.h $(ALL_HEADER)
	@for subdir in $(SUBDIRS); do \
		$(MAKE) -C $$subdir $@ || exit 1 \
		; \
	done

# Use other Makefiles to build prerequisite libraries

$(E_LIB_DEP): %.la:
	$(MAKE) -C $(dir $@) $(notdir $@)

PCH_CXXFLAGS :=

# The precompiled header trick
ifeq ($(PCH),yes)

# Gather appropriate variables
HEADERS := $(wildcard *.h *.hpp) \
	$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.h $(dir)/*.hpp))
HEADERS :=$(filter-out $(ALL_HEADER) revision.h,$(HEADERS))
LIB_ALL_HEADERS := $(wildcard $(foreach lib,$(LIB_DEP_NAMES), \
		$(TOP_DIR)$(subst -,/,$(lib))/$(lib)-all.hpp \
	))

# Modify the CXXFLAGS so that the precompiled header gets used
PCH_CXXFLAGS := -Winvalid-pch -include $(ALL_HEADER)

# How to make the precompiled headers
# In theory both will be checked and the appropriate one will be picked
# (we need them both because of libtool compiling everything twice)
# 
# In old versions of gcc, when it finds that the first one doesn't work it
# gives up.  You can make it go ahead anyway by removing -Winvalid-pch above,
# but then it's impossible to tell whether it's using them properly.
#
# There are also linking problems in the shared library.
# I feel that the '-c' option here is wrong, but it's required to make it work.
# Possibly this is a bug, and causes the linking problems
$(ALL_HEADER_GCH_PIC): $(ALL_HEADER)
	@mkdir -p $(dir $@)
	$(CXX) -x c++-header $(CXXFLAGS) $(BUILD_CXXFLAGS) $(E_INCLUDE) $(THIS_CXXFLAGS) -fPIC -DPIC -c -o $@ $<

$(ALL_HEADER_GCH_PDC): $(ALL_HEADER)
	@mkdir -p $(dir $@)
	$(CXX) -x c++-header $(CXXFLAGS) $(BUILD_CXXFLAGS) $(E_INCLUDE) $(THIS_CXXFLAGS) -c -o $@ $<

# How to make the "all" header
$(ALL_HEADER): $(LIB_ALL_HEADERS) $(HEADERS)
	@-rm -f $@
	for header in $^; \
	do \
		echo '#include "'$${header}'"' >> $@ ; \
	done

# Make all C++ objects depend on it
# (we don't worry about C objects)
$(CXX_OBJS): $(ALL_HEADER_GCH_PDC)

ifneq ($(IS_LIB),)
$(CXX_OBJS): $(ALL_HEADER_GCH_PIC)
endif

endif

# The compile/link commands depend of whether we're building a library or an
# executable

ifneq ($(IS_LIB),)
# When it is a library:

# Build the binary

$(BIN): $(CXX_OBJS) $(C_OBJS) $(E_LIB_DEP)
	libtool --mode=link --tag=CXX $(CXX) $(THIS_LDFLAGS) -rpath $(PREFIX)/lib \
		-g3 -o $@ $(LIBS) $(LIBTOOL_OBJS) $(E_LIB_DEP)

# Libtool objects are made when normal objects are

$(LIBTOOL_OBJS): %.lo: %.o

# The actual compile commands (source dependencies will come from the makefrag
# file).

$(CXX_OBJS): .obj/%.o:
	@mkdir -p $(dir $@)
	libtool --tag=CXX --mode=compile $(CXX) $(CXXFLAGS) $(BUILD_CXXFLAGS) $(E_INCLUDE) $(PCH_CXXFLAGS) $(THIS_CXXFLAGS) -c \
		-o $@ $*.cpp

$(C_OBJS): .obj/%.o:
	@mkdir -p $(dir $@)
	libtool --tag=CC --mode=compile $(CC) $(CFLAGS) $(E_INCLUDE) $(THIS_CFLAGS) -c \
		-o $@ $*.c
else
# When it is an executable

# Build the binary

$(BIN): $(CXX_OBJS) $(C_OBJS) $(E_LIB_DEP)
	libtool --mode=link --tag=CXX $(CXX) -g3 $(THIS_LDFLAGS) -o $@ $(LIBS) $^

# The actual compile commands (source dependencies will come from the makefrag
# file).  Unlike the above, we *don't* use libtool, so as to speed up the
# compile

$(CXX_OBJS): .obj/%.o:
	@mkdir -p $(dir $@)
	$(CXX) $(CXXFLAGS) $(BUILD_CXXFLAGS) $(E_INCLUDE) $(PCH_CXXFLAGS) $(THIS_CXXFLAGS) -c \
		-o $@ $*.cpp

$(C_OBJS): .obj/%.o:
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) $(E_INCLUDE) $(THIS_CFLAGS) -c \
		-o $@ $*.c

endif

# Here follows cunningness to make the makefile handle headers properly

ifneq ($(MAKEFRAGS),)
include $(MAKEFRAGS)

# We make revision.h a dependency of the last included Makefile to ensure that
# it's generated before any of the other makefrags.  It has to be the last
# included because make remakes included makefiles in reverse order.

$(lastword $(MAKEFRAGS)): revision.h

endif

$(MAKEFRAGS): .makefrags/%.makefrag: %
	@mkdir -p $(dir $@)
	cpp $(E_INCLUDE) -MP -MM -MF $@.tmp $<
	@echo "$@ .obj/$(filter-out ./,$(dir $<))`cat $@.tmp`" > $@
	@rm $@.tmp

# If we're in a working copy then we can make a revision.h containing the
# current revision number if so desired (this should be automatically
# generated iff it's included from anywhere).  If we're not in a working copy,
# then we don't define anything.

revision.h: $(wildcard .svn/entries)
	if test -f .svn/entries ; \
	then \
		REVISION=`grep '^   revision=' .svn/entries | \
			sed 's/^   revision="//' | sed 's/"\/>//' | sort -rn | head -n 1`; \
		if test "x$$REVISION" != "x"; \
		then \
			echo '#define REVISION ' "$$REVISION" > $@; \
		else \
		echo '' > $@; \
		fi; \
	else \
		echo '' > $@; \
	fi

.PHONY: all clean

.DELETE_ON_ERROR:

