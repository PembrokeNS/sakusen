# This Makefile section is intended to compile a collection of C++ sources and
# headers (all in one directory), properly keeping track of all header
# dependencies.  You should define a few variables and then include this file -
# you need define no targets at all to get compilation working.  If you do
# define any targets, then you can define them after includeing this file if
# you wish the default action to be a recursive build.
#
# The variables you can define are as follows.  Omit irrelevant ones.
# SUBDIRS - a list of subdirectories to visit recursively when dealing with the
#   'all' or 'clean' targets.  Subdirs are built after the current dir.
# SOURCE_DIRS - a list of directories other than the current one in which to
# 	look for sources
# BIN - the name of the binary to compile from all the cpp files (either a .la
#   library file, or an executable).
# INCLUDE - include arguments, e.g. "-I.. -Imy-headers".  Include arguments
#   will also be extrapolated from LIB_DEP_NAMES, so you needn't include those
#   here.  Indeed, you probably shouldn't ever need to specify this.
# LIBS - system library arguments, e.g. "-lstdc++".
# LIB_DEP_NAMES - base names of prerequisite libraries, e.g. "libsakusen" will
#   be searched for at ../libsakusen/libsakusen.la  and at
#   ../../libsakusen/libsakusen.la.  This will give appropriate
#   include arguments, linking arguments, make dependencies and rules for
#   building (by making in the directory of the library).
# LIB_DEP - Like LIB_DEP_NAMES, but you provide the full path and name, e.g.
#   "../libsakusen.la", rather than this Makefile searching for you.
# THIS_CXXFLAGS - other args to gcc at compile stage, e.g. "-Werror".
# THIS_LDFLAGS - other args to libtool at link stage, e.g. "-no-install".

# Determine the name of this makefile

MY_NAME := $(lastword $(MAKEFILE_LIST))

# Use it to find the top directory

TOP_DIR := $(dir $(MY_NAME))

CXX_SOURCES := $(wildcard *.cpp) \
	$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.cpp))
C_SOURCES := $(wildcard *.c) \
	$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.c))
CXX_BASES := $(basename $(CXX_SOURCES))
C_BASES := $(basename $(C_SOURCES))
LIBTOOL_OBJS := $(foreach base,$(CXX_BASES) $(C_BASES),.obj/$(base).lo)
CXX_OBJS := $(foreach base,$(CXX_BASES),.obj/$(base).o)
C_OBJS := $(foreach base,$(C_BASES),.obj/$(base).o)
MAKEFRAGS := \
	$(foreach source,$(CXX_SOURCES) $(C_SOURCES),.makefrags/$(source).makefrag)

# We replace '-' with '/' in the library name when using it as a directory
# because e.g. libsakusen-comms is in libsakusen/comms

E_LIB_DEP := $(foreach lib,$(LIB_DEP_NAMES), \
		$(TOP_DIR)$(subst -,/,$(lib))/$(lib).la \
	) \
	$(LIB_DEP)
E_INCLUDE := -I. $(foreach lib,$(E_LIB_DEP),-I$(dir $(lib))) $(INCLUDE)

CXX ?= g++
CC ?= gcc

# Default target is to build the binary (and recurse)

all: $(BIN)
	@for subdir in $(SUBDIRS); do \
		$(MAKE) -C $$subdir $@ || exit 1 \
		; \
	done

# Clean (recursively)

clean:
	-rm -rf .libs .obj .makefrags $(BIN) revision.h
	@for subdir in $(SUBDIRS); do \
		$(MAKE) -C $$subdir $@ || exit 1 \
		; \
	done

# Build the binary

$(BIN): $(CXX_OBJS) $(C_OBJS) $(E_LIB_DEP)
	libtool --mode=link gcc -g3 $(THIS_LDFLAGS) -o $@ $(LIBS) $(LIBTOOL_OBJS) $(E_LIB_DEP)

# Use other Makefiles to build prerequisite libraries

$(E_LIB_DEP): %.la:
	$(MAKE) -C $(dir $@) $(notdir $@)

# Libtool objects are made when normal objects are

$(LIBTOOL_OBJS): %.lo: %.o

# The actual compile commands (source dependencies will come from the makefrag
# file).

$(CXX_OBJS): .obj/%.o:
	@mkdir -p $(dir $@)
	libtool --tag=CXX --mode=compile $(CXX) $(CXXFLAGS) $(E_INCLUDE) $(THIS_CXXFLAGS) -c \
		-o $@ $*.cpp

$(C_OBJS): .obj/%.o:
	@mkdir -p $(dir $@)
	libtool --tag=CC --mode=compile $(CC) $(CFLAGS) $(E_INCLUDE) $(THIS_CFLAGS) -c \
		-o $@ $*.c

# Here follows cunningness to make the makefile handle headers properly

ifneq ($(MAKEFRAGS),)
include $(MAKEFRAGS)
endif

# We make revision.h a dependency of this Makefile to ensure that it's
# generated before any of the other makefrags, but only if there is actually a
# compilation going on in this directory

ifneq ($(BIN),)
$(MY_NAME): revision.h
endif

$(MAKEFRAGS): .makefrags/%.makefrag: %
	@mkdir -p $(dir $@)
	cpp $(E_INCLUDE) -MP -MM -MF $@.tmp $<
	@echo "$@ .obj/$(filter-out ./,$(dir $<))`cat $@.tmp`" > $@
	@rm $@.tmp

# If we're in a working copy then we can make a revision.h containing the
# current revision number if so desired (this should be automatically
# generated iff it's included from anywhere).  If we're not in a working copy,
# then we don't define anything.

revision.h: $(wildcard .svn/entries)
	if [ -f .svn/entries ]; \
	then \
		echo '#define REVISION '`grep '^   revision=' .svn/entries | \
			sed 's/^   revision="//' | sed 's/"\/>//' | sort -rn | head -n 1` \
      > $@; \
	else \
		echo '' > $@; \
	fi

.PHONY: all clean

.DELETE_ON_ERROR:

