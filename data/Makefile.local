DIRS := $(shell find $(this_srcdir)test -type d -a -name '*.dir')
BASES := $(patsubst $(this_srcdir)%,%,$(basename $(DIRS)))
SAKUSNSOURCES := $(addsuffix .sakusensource,$(BASES))
DIR_MAKEFRAGS := $(foreach base,$(BASES),.makefrags/$(base).makefrag)
SUBDIRS := $(foreach base,$(BASES),module/$(base))
SUBDIR_MAKEFILES := $(addsuffix /Makefile.local,$(SUBDIRS))

all-nonrecursive: sources

sources: $(SAKUSNSOURCES)

include $(DIR_MAKEFRAGS)

$(SAKUSNSOURCES): %.sakusensource: .makefrags/%.makefrag
	mkdir -p $(dir $@)
	ORIG_DIR=`pwd` && \
	cd $(this_srcdir)$*.dir && \
	tar -cjf $${ORIG_DIR}/$@ $(notdir $(filter $(this_srcdir)$*.dir/%,$^))

$(DIR_MAKEFRAGS): .makefrags/%.makefrag: $(this_srcdir)%.dir
	mkdir -p $(dir $@)
	echo $@ $*.sakusensource: $(wildcard $(this_srcdir)$*.dir/*) > $@

# For obscure reasons, we have to ensure that the source tree contains a
# directory corresponding to the directory we're creating the makefile in to
# exist, hence the second mkdir -p command below.
#
# (The reason is that the sources are specified relative to the directory in
# the source tree, and specifying paths which contain a nonexistant directory
# (even if they 'go out of it' again with ..) doesn't work)
$(SUBDIR_MAKEFILES): %/Makefile.local: $(this_srcdir)Makefile.module $(this_srcdir)Makefile.local
	mkdir -p $(dir $@)
	mkdir -p $(dir $(this_srcdir)$@)
	echo '# This file is autogenerated' > $@
	echo 'BIN = ../$(notdir $*).sakusenmodule.la' >> $@
	@DOTS="`echo "$*" | sed -r 's![^/]+!..!g'`" && \
	echo "SOURCE_DIRS = $${DOTS}"/'$(patsubst module/%,%,$*.dir)' >> $@
	cat $(this_srcdir)Makefile.module >> $@

$(addprefix clean-recurse-,$(SUBDIRS)): clean-recurse-%: %/Makefile.local

$(addprefix all-recurse-,$(SUBDIRS)): all-recurse-%: %/Makefile.local

$(addprefix test-recurse-,$(SUBDIRS)): test-recurse-%: %/Makefile.local

clean:
	-rm -rf .makefrags $(SAKUSNSOURCES) $(SUBDIRS)

.PHONY: sources

