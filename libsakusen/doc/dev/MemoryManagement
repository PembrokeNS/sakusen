/** \page memory "Memory management"
This is the gospel of libsakusen memory mangement according to John.

In what follows, 'server' refers to the executable which links against
libsakusen, which will probably be a server, but we may be linking clients
against it at some point.

There shall be no global variables apart from world.

There shall be one sakusen::World, one sakusen::Map and one sakusen::Universe.

The server is responsible for allocating the sakusen::Universe, sakusen::Map,
sakusen::World, and all clients.  libsakusen shall only ever deal with pointers
to such things.  The server is also responsible for ensuring that the global
'world' variable points to the right thing.

Objects which exist before the sakusen::World does, and define the parameters
of the game, are stored in sakusen::Universe.  This includes sakusen::UnitType,
sakusen::WeaponType, sakusen::BeamType objects.  Elsewhere these shall be
accessed by pointer or by ID (which is probably the same thing).

The current sakusen::Heightfield is stored in sakusen::Map (I'm slightly
dubious about this - my instinct says that it should be in sakusen::World -
sakusen::Map should store the original Heightfield).

All objects currently in existence on the map are stored in sakusen::World.
This includes all sakusen::Unit, sakusen::Beam, sakusen::Ballistic,
sakusen::Effect and sakusen::PlaceAction object (including subunits!) but not
sakusen::UnitAction objects.

sakusen::UnitAction and sakusen::Weapon objects are stored in the Unit to which
they are attached.

Subactions which are triggered by other actions (the 'next' field in
sakusen::UnitAction and sakusen::PlaceAction) are stored on the heap, with a
pointer in their parent action.  This pointer shall be kept private, and never
revealed to outside code.  When someone else wants the 'next' action, they get
a copy.  When the parent action is destroyed, the subaction is deleted.

*/
