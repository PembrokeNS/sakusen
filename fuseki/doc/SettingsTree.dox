/** \page settingstree Settings Tree

The settings tree is managed by the server and it is through it that clients
can affect various aspects of the game.

The settings tree is organised much like a file system, in a tree with branches
(like directories) and leaves (like files).  Branches and leaves are
collectively called nodes.  Each leaf has an associated value,
which can be of one of the following types:

<ul>
  <li><var>int</var> some integer type</li>
  <li><var>string</var> a simple string value</li>
  <li><var>bool</var> boolean</li>
  <li><var>stringset</var> an unordered list of string values</li>
</ul>

However, all of these must be converted to and from string representations when
communicating with the clients.

When setting a boolean value, carious strings are recongnised: "1", "on" and
"true" are interpreted as true, while "0", "off" and "false" are interpreted as
false.  When getting a boolean value, the result is always either "true" or
"false".

When altering a string set value, the assignment will be interpreted according
to its first character:

<ul>
  <li>&quot;+<var>value</var>&quot; adds <var>value</var> to the set.
  <li>&quot;-<var>value</var>&quot; removes <var>value</var> from the set.
  <li>&quot;0&quot; clears the set.
</ul>

Each node also has a list of groups with read permission for that node, and
another list of groups with write permission.  To get the value of a leaf, or
to list the children of a branch, you
must have read permissions for it and all its parent nodes to the root of the
tree.  To alter the value of a leaf or add/remove child nodes to/from a branch
you must have read and write permisions for it and read permissions for all its
parent nodes to the root of the tree.

Each group is identified by a string name. At present the following exist:

<ul>
  <li><var>world</var> A cover-all group that includes all users.</li>
  <li><var>server</var> A group to which only the server belongs and which has
  absolute permissions everywhere (analagous to root in a unix file
  system)</li>
  <li><var>admin</var> A group to which some (administrator) clients can
  belong, which gives them additional permissions</li>
  <li><var>playtime</var> A group with permissions to alter the game state in
  some limited ways once
  the game has started (e.g. pause the game, change the game speed).</li>
  <li><var>client<var>n</var></var> A group to which only client <var>n</var>
  belongs.
  <li><var>player<var>n</var></var> A group to which clients attached to player
  <var>n</var> belong.
</ul>

Many leaves of the settings tree have <dfn>magic</dfn> associated with them.
This means that altering the value can cause the server to perform other
actions.

The settings tree as I presently imagine it stands as follows.  Some has been
implemented.

<ul>
  <li><var>server</var>
  <ul>
    <li><var>application</var>
    <ul>
      <li><var>name</var></li>
      <li><var>version</var></li>
      <li><var>revision</var></li>
    </ul></li>
    <li><var>blockedaddresses</var></li>
    <li><var>allowobservers</var></li>
    <li><var>deadclienttimeout</var></li>
    <li><var>countdown</var></li>
    <li><var>plugins</var>, a stringset. Adding an element <var>foo</var> to
      this list causes fuseki to search for a plugin with a name starting
      <var>foo</var> and load it.  If there is no such plugin or more than one
      such then the attempt fails.  The --plugins
      command line option allows the search path
      for plugins to be specified.</li>
  </ul></li>

  <li><var>game</var>
  <ul>
    <li><var>name</var></li>
    <li><var>universe</var>
    <ul>
      <li><var>name</var>, a string.  Setting it to
        <var>foo</var>causes fuseki to search for a
        universe with name starting <var>foo</var>, and load it if found.</li>
      <li><var>hash</var>, a string.  Set to the hex value of the universe
        hash once one is loaded.</li>
    </ul></li>
    <li><var>map</var>, a string.  Analagous to universe:name, but for the
      map.</li>
    <li><var>mapplaymode</var>, and integer.  Which mode of the map to
      use.</li>
    <li><var>usesuggesteduniverse</var></li>
    <li><var>speed</var>, an integer.  Number of microseconds per tick of
      game.  Note that this is really inverse speed, not speed.</li>
    <li><var>paused</var>, a bool.  When true, pauses the game.</li>
  </ul></li>
      
  <li><var>clients</var>
  <ul>
    <li><var>n</var> (where <var>n</var> is the number of the client)
    <ul>
      <li><var>application</var>
      <ul>
        <li><var>name</var></li>
        <li><var>version</var></li>
        <li><var>revision</var></li>
      </ul></li>
      <li><var>ping</var></li>
      <li><var>admin</var>, a bool.  True iff the client has admin privelages
        (which means the ability to edit more of the settings in this
        tree).</li>
      <li><var>neveradmin</var>, a bool.  If true, the server will never make
        this client into an admin.  Should be true for AI players, for
        example.</li>
      <li><var>observer</var>, a bool.  True if the client is (to be) an
        observer, and not control a player.</li>
      <li><var>player</var>, an int.  Specifies the player that the client
        controls / will control.  Should be 0 for observers.</li>
      <li><var>ready</var>, a bool.  True if the client is ready to begin.
        The server will not start until all clients are ready.</li>
      <li><var>controller</var>
      <ul>
        <li><var>name</var></li>
        <li><var>comments</var></li>
        <li><var>guidance</var>
        <ul>
          <li>...</li>
        </ul></li>
      </ul></li>
      <li><var>kicked</var></li>
      <li><var>connection</var></li>
      <li><var>autounready</var>, a bool.  If true, then the server will
        automatically clear the client's ready flag whenever any setting
        except for a clients readiness changes.</li>
      <li><var>capabilities</var>
      <ul>
        <li>...</li>
      </ul></li>
    </ul></li>
  </ul></li>

  <li><var>players</var>
  <ul>
    <li><var>n</var> (where <var>n</var> is the number of the player)
    <ul>
      <li><var>name</var></li>
      <li><var>race</var></li>
      <li><var>racefixed</var></li>
      <li><var>maxclients</var></li>
      <li><var>noclients</var>, a bool.  True when the player is not intended
        to have clients attached (e.g. a player of critters)</li>
      <li><var>colour</var> (also <var>color</var>?)</li>
      <li><var>handicap</var></li>
    </ul></li>
  </ul></li>
</ul>

\todo Describe what these settings mean, their permissions, and their
associated magic.
*/
