# Example tedomari UI configuration file
#
# To take effect, this file should be placed at ~/.sakusen/tedomari/ui.conf
#
# This file uses features thrown together quickly in order to get the UI
# working as fast as possible.  They are all subject to change, from the syntax
# of the file to the names of the commands themselves.
#
# Commands are one-per-line, except where braces {} are used - a command cannot
# end while there is an unclosed open brace.
#
# Comments go from a # to a newline
#
# Each command is interpreted as if it were typed at the UI prompt and executed
# when the UI starts up, in the order they are given in this file.
#
# Wherever commands take a MODE argument to specify a mode, you can specify
# 'all' to mean all modes.  At present only the 'unit' and 'normal' modes
# exist.
#
# Some of the supported commands here used are:
#
# alias MODE NEW_CMD OLD_CMD ARG...
#
# Creates a new command which is an alias of an existing command, where
# MODE is the mode in which the alias should take effect, NEW_CMD
# is the name of the new command being created, OLD_CMD is
# the name of the old command for which the new one is an alias, and each ARG
# will be prefixed to the arguments given to NEW_CMD, with the concatenation
# passed as arguments to OLD_CMD.
#
# bind MODE KEY_NAME COMMAND ARG...
#
# Binds the key KEY_NAME to the command COMMAND ARG... in mode MODE.  See
# ui/key.cpp to find out key names.  The key name can be prefixed with '+' to
# indicate a bind for the pressing of the key, or '-' for the releasing of it.
# If neither is given, the default is to bind to the pressing of the key.
#
# func MODE NAME NUM_ARGS { COMMAND;... }
#
# Creates a user-defined function, which also serves as a new command with name
# NAME (which can be bound or aliased).  The function applies in mode MODE and
# takes NUM_ARGS arguments.  When the function is called, the commands
# COMMAND;... are executed (they must be semicolon-delimited since newlines do
# not terminate commands between braces).  The arguments to the function will
# replace tokens $0, $1, etc. within the function body upon execution.
#
# prompt
#
# Brings up the UI prompt so commands can be entered by the user
#
# movemaprel X_MOVE Y_MOVE
#
# Translates the currently active map display by the given fractions of the
# total displayed map size in the x- and y-directions.
#
# switchmode MODE
#
# Switch the UI to mode MODE (here, you cannot specify 'all' for MODE).
#
# startdragregion
# stopdragregion
#
# Cause the currently active map display to start and stop drawing a rectangle
# from the cursor position at the time startdragregion is executed to the
# current cursor position.
#
# select SELECTION
#
# Selects some units.  At present the only valid value for SELECTION is
# 'lastrectangle', which means all units intersecting the last rectangle
# instigated by a start/stopdragregion pair.
#
# Then there's some things you can do to actually initiate orders.  I may
# document them at some point, but for now you can attempt to infer from the
# content herein.  In short, the commands are:
#
# initializeaction ACTION
# abortaction
# supplyarg ARG

alias all aalias alias all

aalias abind bind all
aalias nbind bind normal
aalias ubind bind unit
aalias tbind bind target
aalias sbind bind string
aalias tfbind bind targetframe
aalias tubind bind targetunit

aalias afunc func all
aalias nfunc func normal
aalias ufunc func unit
aalias tfunc func target

abind ';' prompt
abind '/' regex

abind left movemaprel -0.1 0
abind kpleft movemaprel -0.5 0
abind right movemaprel 0.1 0
abind kpright movemaprel 0.5 0
abind up movemaprel 0 0.1
abind kpup movemaprel 0 0.5
abind down movemaprel 0 -0.1
abind kpdown movemaprel 0 -0.5

afunc switch_to_unit_mode_and_select 0 {
  stopdragregion;
  switchmode unit;
  select lastrectangle;
}

abind +mleft startdragregion
abind -mleft switch_to_unit_mode_and_select

ufunc move_to_cursor 0 {
  initializeaction move;
  supplyarg cursor;
}

ubind +mright move_to_cursor
ubind a initializeaction attack
ubind c initializeaction create
ubind b initializeaction build
ubind s initializeaction stop

tbind +mright supplyarg cursor
abind esc abortaction

tfbind +mright supplyarg cursor

tubind +mright supplyarg cursor

