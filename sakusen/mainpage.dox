/**
\namespace sakusen
\brief libsakusen: The core sakusen library.

libsakusen is the core of Sakusen. It defines things which must be used in the
same way by both client and server, such as maps, UnitTypes, and SensorReturns
and includes the code which allows such items to be turned into bytestreams for
writing to disk or transmission over the network (but libsakusen itself handles
neither of these issues). It is anticipated that all Sakusen clients and
servers will use libsakusen; thus, it must be kept as fast as possible.

The libraries immediately depending on libsakusen are:

\li \ref sakusen::comms contains code pertaining to server-client
communication, particularly networking.
\li \ref sakusen::resources deals with loading and saving game data from and to
disk, and transmission of such data from those who have it to those who need
it.
\li \ref sakusen::server conatins code central to the game engine, but of no
interest to clients (typically because it requires total information about the
game state).
\li \ref sakusen::client, similarly, provides functionality for clients which
is of no interest to servers.

These four libraries are almost independent, with the exception that resources depends on comms.

\todo We have some coding style issues to sort out.

\li Do we indent inside \c public: blocks etc.?
\li Do names of enums start with a capital?
\li Do we put a prefix on members of an enum?
\li Where do ctors and dtors go, before or after \c private fields?
\li Do spaces go in single-line blocks? That is, do we like
\code uint16 getEnergyCost(void) const {return energyCost;} \endcode
or
\code uint16 getEnergyCost(void) const { return energyCost; } \endcode

\bug Many classes' assignment operators do not cope with self-assignment

*/
